Activity_main.xml :


&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;

&lt;androidx.constraintlayout.widget.ConstraintLayout
xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
android:id=&quot;@+id/container&quot;
android:layout_width=&quot;match_parent&quot;
android:layout_height=&quot;match_parent&quot;
android:animateLayoutChanges=&quot;true&quot;
android:background=&quot;@color/very_very_light_gray&quot;
android:fitsSystemWindows=&quot;true&quot;&gt;
&lt;android.widget.Toolbar
android:id=&quot;@+id/toolbarPairing&quot;
android:layout_width=&quot;match_parent&quot;
android:layout_height=&quot;?attr/actionBarSize&quot;
android:background=&quot;@null&quot;
android:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;
android:theme=&quot;@style/Theme.Toolbar&quot;
android:title=&quot;@string/app_name&quot;
android:titleTextColor=&quot;@color/primary&quot;
app:layout_constraintBottom_toBottomOf=&quot;parent&quot;
app:layout_constraintEnd_toEndOf=&quot;parent&quot;
app:layout_constraintHorizontal_bias=&quot;0&quot;
app:layout_constraintStart_toStartOf=&quot;parent&quot;
app:layout_constraintTop_toTopOf=&quot;parent&quot;
app:layout_constraintVertical_bias=&quot;0&quot; /&gt;
&lt;ProgressBar
android:id=&quot;@+id/progressBar2&quot;
style=&quot;?android:attr/progressBarStyle&quot;
android:layout_width=&quot;24dp&quot;
android:layout_height=&quot;24dp&quot;
android:layout_marginStart=&quot;8dp&quot;
android:layout_marginTop=&quot;16dp&quot;
android:layout_marginEnd=&quot;16dp&quot;
android:layout_marginBottom=&quot;8dp&quot;
android:indeterminateTint=&quot;@color/primary&quot;
android:visibility=&quot;gone&quot;
app:layout_constraintBottom_toBottomOf=&quot;parent&quot;
app:layout_constraintEnd_toEndOf=&quot;parent&quot;
app:layout_constraintHorizontal_bias=&quot;1.0&quot;
app:layout_constraintStart_toStartOf=&quot;parent&quot;
app:layout_constraintTop_toTopOf=&quot;parent&quot;
app:layout_constraintVertical_bias=&quot;0.0&quot; /&gt;

&lt;com.bluetooth.communicatorexample.gui.ButtonSearch
android:id=&quot;@+id/searchButton&quot;
android:layout_width=&quot;24dp&quot;
android:layout_height=&quot;24dp&quot;
android:layout_marginStart=&quot;8dp&quot;
android:layout_marginTop=&quot;16dp&quot;
android:layout_marginEnd=&quot;16dp&quot;
android:layout_marginBottom=&quot;8dp&quot;
android:background=&quot;@null&quot;
android:scaleType=&quot;fitCenter&quot;
android:src=&quot;@drawable/cancel_icon&quot;
android:tint=&quot;@color/primary&quot;
android:visibility=&quot;visible&quot;
app:layout_constraintBottom_toBottomOf=&quot;@+id/toolbarPairing&quot;
app:layout_constraintEnd_toEndOf=&quot;@+id/toolbarPairing&quot;
app:layout_constraintHorizontal_bias=&quot;1&quot;
app:layout_constraintStart_toStartOf=&quot;@+id/toolbarPairing&quot;
app:layout_constraintTop_toTopOf=&quot;@+id/toolbarPairing&quot;
app:layout_constraintVertical_bias=&quot;0.0&quot; /&gt;

&lt;androidx.cardview.widget.CardView
android:id=&quot;@+id/cardView4&quot;
android:layout_width=&quot;match_parent&quot;
android:layout_height=&quot;0dp&quot;
android:layout_marginStart=&quot;8dp&quot;
android:layout_marginTop=&quot;8dp&quot;
android:layout_marginEnd=&quot;8dp&quot;
android:layout_marginBottom=&quot;8dp&quot;
android:backgroundTint=&quot;@color/white&quot;
app:cardCornerRadius=&quot;8dp&quot;
app:layout_constraintBottom_toBottomOf=&quot;parent&quot;
app:layout_constraintEnd_toEndOf=&quot;parent&quot;
app:layout_constraintStart_toStartOf=&quot;parent&quot;
app:layout_constraintTop_toBottomOf=&quot;@+id/toolbarPairing&quot;&gt;
&lt;androidx.constraintlayout.widget.ConstraintLayout
android:layout_width=&quot;match_parent&quot;
android:layout_height=&quot;match_parent&quot;&gt;
&lt;ListView
android:id=&quot;@+id/list_view&quot;
android:layout_width=&quot;0dp&quot;

android:layout_height=&quot;0dp&quot;
android:layout_marginTop=&quot;8dp&quot;
android:layout_marginBottom=&quot;8dp&quot;
android:animateLayoutChanges=&quot;true&quot;
android:childDivider=&quot;#00000000&quot;
android:divider=&quot;#00000000&quot;
android:dividerHeight=&quot;6dp&quot;
android:overScrollMode=&quot;never&quot;
android:visibility=&quot;gone&quot;
app:layout_constraintBottom_toBottomOf=&quot;parent&quot;
app:layout_constraintEnd_toEndOf=&quot;parent&quot;
app:layout_constraintStart_toStartOf=&quot;parent&quot;
app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;
&lt;TextView
android:id=&quot;@+id/noDevices&quot;
android:layout_width=&quot;wrap_content&quot;
android:layout_height=&quot;wrap_content&quot;
android:layout_marginStart=&quot;8dp&quot;
android:layout_marginTop=&quot;8dp&quot;
android:layout_marginEnd=&quot;8dp&quot;
android:layout_marginBottom=&quot;8dp&quot;
android:text=&quot;no devices&quot;
android:visibility=&quot;visible&quot;
app:layout_constraintBottom_toBottomOf=&quot;parent&quot;
app:layout_constraintEnd_toEndOf=&quot;parent&quot;
app:layout_constraintStart_toStartOf=&quot;parent&quot;
app:layout_constraintTop_toBottomOf=&quot;@+id/discoveryDescription&quot;
app:layout_constraintVertical_bias=&quot;0.29&quot; /&gt;
&lt;TextView
android:id=&quot;@+id/discoveryDescription&quot;
android:layout_width=&quot;0dp&quot;
android:layout_height=&quot;wrap_content&quot;
android:layout_marginStart=&quot;32dp&quot;
android:layout_marginTop=&quot;16dp&quot;
android:layout_marginEnd=&quot;32dp&quot;
android:layout_marginBottom=&quot;32dp&quot;
android:text=&quot;This screen will search and make us visible to other devices that use
BluetoothCommunicator to be able to establish a connection with them and start the conversation&quot;
android:textAlignment=&quot;center&quot;
android:textColor=&quot;@color/light_gray&quot;
android:visibility=&quot;visible&quot;
app:layout_constraintBottom_toBottomOf=&quot;parent&quot;
app:layout_constraintEnd_toEndOf=&quot;parent&quot;

app:layout_constraintStart_toStartOf=&quot;parent&quot;
app:layout_constraintTop_toTopOf=&quot;parent&quot;
app:layout_constraintVertical_bias=&quot;0&quot; /&gt;
&lt;TextView
android:id=&quot;@+id/noPermission&quot;
android:layout_width=&quot;0dp&quot;
android:layout_height=&quot;wrap_content&quot;
android:layout_marginStart=&quot;32dp&quot;
android:layout_marginTop=&quot;16dp&quot;
android:layout_marginEnd=&quot;32dp&quot;
android:layout_marginBottom=&quot;8dp&quot;
android:text=&quot;It is not possible to search for devices without location permission, go to the
settings to grant it, or reinstall the app&quot;
android:textAlignment=&quot;center&quot;
android:textColor=&quot;@color/red&quot;
android:visibility=&quot;gone&quot;
app:layout_constraintBottom_toBottomOf=&quot;parent&quot;
app:layout_constraintEnd_toEndOf=&quot;parent&quot;
app:layout_constraintStart_toStartOf=&quot;parent&quot;
app:layout_constraintTop_toBottomOf=&quot;@+id/discoveryDescription&quot;
app:layout_constraintTop_toTopOf=&quot;parent&quot;
app:layout_constraintVertical_bias=&quot;0&quot; /&gt;
&lt;TextView
android:id=&quot;@+id/noBluetoothLe&quot;
android:layout_width=&quot;0dp&quot;
android:layout_height=&quot;wrap_content&quot;
android:layout_marginStart=&quot;32dp&quot;
android:layout_marginTop=&quot;16dp&quot;
android:layout_marginEnd=&quot;32dp&quot;
android:layout_marginBottom=&quot;8dp&quot;
android:text=&quot;It is not possible to search because this device does not have Bluetooth Low
Energy&quot;
android:textAlignment=&quot;center&quot;
android:textColor=&quot;@color/red&quot;
android:visibility=&quot;gone&quot;
app:layout_constraintBottom_toBottomOf=&quot;parent&quot;
app:layout_constraintEnd_toEndOf=&quot;parent&quot;
app:layout_constraintStart_toStartOf=&quot;parent&quot;
app:layout_constraintTop_toTopOf=&quot;parent&quot;
app:layout_constraintVertical_bias=&quot;0&quot; /&gt;
&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;
&lt;/androidx.cardview.widget.CardView&gt;
&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;





Mainactivity.java :


package com.bluetooth.communicatorexample;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;
import android.Manifest;
import android.content.DialogInterface;
import android.os.Bundle;
import android.view.View;
import com.bluetooth.communicatorexample.fragments.ConversationFragment;
import com.bluetooth.communicatorexample.fragments.PairingFragment;
import com.bluetooth.communicatorexample.tools.Tools;
import com.bluetooth.communicator.BluetoothCommunicator;
import com.bluetooth.communicator.Peer;
import java.util.ArrayList;
import java.util.List;
public class MainActivity extends AppCompatActivity {
public static final int PAIRING_FRAGMENT = 0;
public static final int CONVERSATION_FRAGMENT = 1;
public static final int DEFAULT_FRAGMENT = PAIRING_FRAGMENT;
public static final int NO_PERMISSIONS = -10;
private static final int REQUEST_CODE_REQUIRED_PERMISSIONS = 2;
public static final String[] REQUIRED_PERMISSIONS = new String[]{
Manifest.permission.BLUETOOTH,
Manifest.permission.BLUETOOTH_ADMIN,
Manifest.permission.ACCESS_COARSE_LOCATION,
};
private Global global;
private int currentFragment = -1;
private ArrayList&lt;Callback&gt; clientsCallbacks = new ArrayList&lt;&gt;();
private CoordinatorLayout fragmentContainer;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
global = (Global) getApplication();
FragmentManager fragmentManager = getSupportFragmentManager();
if (fragmentManager.getBackStackEntryCount() &gt; 0) {
fragmentManager.popBackStack(null,
FragmentManager.POP_BACK_STACK_INCLUSIVE);
}
List&lt;Fragment&gt; fragmentList = fragmentManager.getFragments();
for (Fragment fragment : fragmentList) {
if (fragment != null) {
fragmentManager.beginTransaction().remove(fragment).commit();
}
}
View decorView = getWindow().getDecorView();
decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE |
View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN |
View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
fragmentContainer = findViewById(R.id.fragment_container);
global.getBluetoothCommunicator().addCallback(new BluetoothCommunicator.Callback() {
@Override
public void onAdvertiseStarted() {
super.onAdvertiseStarted();
if (global.getBluetoothCommunicator().isDiscovering()) {
notifySearchStarted();
}
}
@Override
public void onDiscoveryStarted() {
super.onDiscoveryStarted();
if (global.getBluetoothCommunicator().isAdvertising()) {
notifySearchStarted();
}
}
@Override

public void onAdvertiseStopped() {
super.onAdvertiseStopped();
if (!global.getBluetoothCommunicator().isDiscovering()) {
notifySearchStopped();
}
}
@Override
public void onDiscoveryStopped() {
super.onDiscoveryStopped();
if (!global.getBluetoothCommunicator().isAdvertising()) {
notifySearchStopped();
}
}
});
}
@Override
protected void onStart() {
super.onStart();
if (global.getBluetoothCommunicator().getConnectedPeersList().size() == 0) {
setFragment(DEFAULT_FRAGMENT);
} else {
setFragment(CONVERSATION_FRAGMENT);
}
}
public void setFragment(int fragmentName) {
switch (fragmentName) {
case PAIRING_FRAGMENT: {
if (getCurrentFragment() != PAIRING_FRAGMENT) {
PairingFragment paringFragment = new PairingFragment();
FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_CLOSE);
transaction.replace(R.id.fragment_container, paringFragment);
transaction.commit();
currentFragment = PAIRING_FRAGMENT;
}
break;
}
case CONVERSATION_FRAGMENT: {
if (getCurrentFragment() != CONVERSATION_FRAGMENT) {
ConversationFragment conversationFragment = new ConversationFragment();
FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);

transaction.replace(R.id.fragment_container, conversationFragment);
transaction.commit();
currentFragment = CONVERSATION_FRAGMENT;
}
break;
}
}
}
public int getCurrentFragment() {
if (currentFragment != -1) {
return currentFragment;
} else {
Fragment currentFragment =
getSupportFragmentManager().findFragmentById(R.id.fragment_container);
if (currentFragment != null) {
if (currentFragment.getClass().equals(PairingFragment.class)) {
return PAIRING_FRAGMENT;
}
if (currentFragment.getClass().equals(ConversationFragment.class)) {
return CONVERSATION_FRAGMENT;
}
}
}
return -1;
}
@Override
public void onBackPressed() {
DialogInterface.OnClickListener confirmExitListener = new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int which) {
exitFromConversation();
}
};
Fragment fragment =
getSupportFragmentManager().findFragmentById(R.id.fragment_container);
if (fragment != null) {
if (fragment instanceof ConversationFragment) {
showConfirmExitDialog(confirmExitListener);
} else {
super.onBackPressed();
}
} else {
super.onBackPressed();

}
}
public void exitFromConversation() {
if (global.getBluetoothCommunicator().getConnectedPeersList().size() &gt; 0) {
Fragment fragment =
getSupportFragmentManager().findFragmentById(R.id.fragment_container);
if (fragment instanceof ConversationFragment) {
ConversationFragment conversationFragment = (ConversationFragment) fragment;
conversationFragment.appearLoading();
}
global.getBluetoothCommunicator().disconnectFromAll();
} else {
setFragment(DEFAULT_FRAGMENT);
}
}
protected void showConfirmExitDialog(DialogInterface.OnClickListener confirmListener) {
//creazione del dialog.
AlertDialog.Builder builder = new AlertDialog.Builder(this);
builder.setCancelable(true);
builder.setMessage(&quot;Confirm exit&quot;);
builder.setPositiveButton(android.R.string.ok, confirmListener);
builder.setNegativeButton(android.R.string.cancel, null);
AlertDialog dialog = builder.create();
dialog.show();
}
public int startSearch() {
if (global.getBluetoothCommunicator().isBluetoothLeSupported() ==
BluetoothCommunicator.SUCCESS) {
if (Tools.hasPermissions(this, REQUIRED_PERMISSIONS)) {
int advertisingCode = global.getBluetoothCommunicator().startAdvertising();
int discoveringCode = global.getBluetoothCommunicator().startDiscovery();
if (advertisingCode == discoveringCode) {
return advertisingCode;
}
if (advertisingCode == BluetoothCommunicator.BLUETOOTH_LE_NOT_SUPPORTED ||
discoveringCode == BluetoothCommunicator.BLUETOOTH_LE_NOT_SUPPORTED) {
return BluetoothCommunicator.BLUETOOTH_LE_NOT_SUPPORTED;
}
if (advertisingCode == BluetoothCommunicator.SUCCESS || discoveringCode ==
BluetoothCommunicator.SUCCESS) {

if (advertisingCode == BluetoothCommunicator.ALREADY_STARTED ||
discoveringCode == BluetoothCommunicator.ALREADY_STARTED) {
return BluetoothCommunicator.SUCCESS;
}
}
return BluetoothCommunicator.ERROR;
} else {
requestPermissions(REQUIRED_PERMISSIONS,
REQUEST_CODE_REQUIRED_PERMISSIONS);
return NO_PERMISSIONS;
}
} else {
return BluetoothCommunicator.BLUETOOTH_LE_NOT_SUPPORTED;
}
}
public int stopSearch(boolean tryRestoreBluetoothStatus) {
int advertisingCode =
global.getBluetoothCommunicator().stopAdvertising(tryRestoreBluetoothStatus);
int discoveringCode =
global.getBluetoothCommunicator().stopDiscovery(tryRestoreBluetoothStatus);
if (advertisingCode == discoveringCode) {
return advertisingCode;
}
if (advertisingCode == BluetoothCommunicator.BLUETOOTH_LE_NOT_SUPPORTED ||
discoveringCode == BluetoothCommunicator.BLUETOOTH_LE_NOT_SUPPORTED) {
return BluetoothCommunicator.BLUETOOTH_LE_NOT_SUPPORTED;
}
if (advertisingCode == BluetoothCommunicator.SUCCESS || discoveringCode ==
BluetoothCommunicator.SUCCESS) {
if (advertisingCode == BluetoothCommunicator.ALREADY_STOPPED || discoveringCode ==
BluetoothCommunicator.ALREADY_STOPPED) {
return BluetoothCommunicator.SUCCESS;
}
}
return BluetoothCommunicator.ERROR;
}
public boolean isSearching() {
return global.getBluetoothCommunicator().isAdvertising() &amp;&amp;
global.getBluetoothCommunicator().isDiscovering();
}
public void connect(Peer peer) {
stopSearch(false);

global.getBluetoothCommunicator().connect(peer);
}
public void acceptConnection(Peer peer) {
global.getBluetoothCommunicator().acceptConnection(peer);
}
public void rejectConnection(Peer peer) {
global.getBluetoothCommunicator().rejectConnection(peer);
}
public int disconnect(Peer peer) {
return global.getBluetoothCommunicator().disconnect(peer);
}
public CoordinatorLayout getFragmentContainer() {
return fragmentContainer;
}

public void addCallback(Callback callback) {
// in this way the listener will listen to both this activity and the communicatorexample
global.getBluetoothCommunicator().addCallback(callback);
clientsCallbacks.add(callback);
}
public void removeCallback(Callback callback) {
global.getBluetoothCommunicator().removeCallback(callback);
clientsCallbacks.remove(callback);
}
private void notifyMissingSearchPermission() {
for (int i = 0; i &lt; clientsCallbacks.size(); i++) {
clientsCallbacks.get(i).onMissingSearchPermission();
}
}
private void notifySearchPermissionGranted() {
for (int i = 0; i &lt; clientsCallbacks.size(); i++) {
clientsCallbacks.get(i).onSearchPermissionGranted();
}
}
private void notifySearchStarted() {

for (int i = 0; i &lt; clientsCallbacks.size(); i++) {
clientsCallbacks.get(i).onSearchStarted();
}
}
private void notifySearchStopped() {
for (int i = 0; i &lt; clientsCallbacks.size(); i++) {
clientsCallbacks.get(i).onSearchStopped();
}
}
public static class Callback extends BluetoothCommunicator.Callback {
public void onSearchStarted() {
}
public void onSearchStopped() {
}
public void onMissingSearchPermission() {
}
public void onSearchPermissionGranted() {
}
}
}
Fragment_Conversation.xml
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;androidx.constraintlayout.widget.ConstraintLayout
xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
xmlns:tools=&quot;http://schemas.android.com/tools&quot;
android:id=&quot;@+id/container2&quot;
android:layout_width=&quot;match_parent&quot;
android:layout_height=&quot;match_parent&quot;
android:animateLayoutChanges=&quot;true&quot;
android:background=&quot;@color/white&quot;
android:fitsSystemWindows=&quot;true&quot;&gt;
&lt;Toolbar
android:id=&quot;@+id/toolbarConversation&quot;
android:layout_width=&quot;match_parent&quot;

android:layout_height=&quot;?attr/actionBarSize&quot;
android:background=&quot;@null&quot;
android:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;
android:theme=&quot;@style/Theme.Toolbar&quot;
android:title=&quot;@string/app_name&quot;
android:titleTextColor=&quot;@color/primary&quot;
app:layout_constraintBottom_toBottomOf=&quot;parent&quot;
app:layout_constraintEnd_toEndOf=&quot;parent&quot;
app:layout_constraintHorizontal_bias=&quot;0&quot;
app:layout_constraintStart_toStartOf=&quot;parent&quot;
app:layout_constraintTop_toTopOf=&quot;parent&quot;
app:layout_constraintVertical_bias=&quot;0&quot; /&gt;
&lt;ProgressBar
android:id=&quot;@+id/progressBar2&quot;
style=&quot;?android:attr/progressBarStyle&quot;
android:layout_width=&quot;24dp&quot;
android:layout_height=&quot;24dp&quot;
android:layout_marginStart=&quot;8dp&quot;
android:layout_marginTop=&quot;16dp&quot;
android:layout_marginEnd=&quot;16dp&quot;
android:layout_marginBottom=&quot;8dp&quot;
android:indeterminateTint=&quot;@color/primary&quot;
android:visibility=&quot;gone&quot;
app:layout_constraintBottom_toBottomOf=&quot;@+id/toolbarConversation&quot;
app:layout_constraintEnd_toEndOf=&quot;@+id/toolbarConversation&quot;
app:layout_constraintHorizontal_bias=&quot;1&quot;
app:layout_constraintStart_toStartOf=&quot;@+id/toolbarConversation&quot;
app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;
&lt;androidx.recyclerview.widget.RecyclerView
android:id=&quot;@+id/recycler_view&quot;
android:layout_width=&quot;0dp&quot;
android:layout_height=&quot;0dp&quot;
android:layout_marginStart=&quot;8dp&quot;
android:layout_marginEnd=&quot;8dp&quot;
android:layout_marginBottom=&quot;16dp&quot;
android:clipToPadding=&quot;false&quot;
android:focusableInTouchMode=&quot;true&quot;
android:overScrollMode=&quot;never&quot;
android:paddingTop=&quot;8dp&quot;
android:paddingBottom=&quot;8dp&quot;
android:visibility=&quot;gone&quot;
app:layoutManager=&quot;androidx.recyclerview.widget.LinearLayoutManager&quot;
app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;

app:layout_constraintBottom_toTopOf=&quot;@+id/editText&quot;
app:layout_constraintEnd_toEndOf=&quot;parent&quot;
app:layout_constraintHorizontal_bias=&quot;0.0&quot;
app:layout_constraintStart_toStartOf=&quot;parent&quot;
app:layout_constraintTop_toBottomOf=&quot;@+id/toolbarConversation&quot;
app:layout_constraintVertical_bias=&quot;0.0&quot; /&gt;
&lt;EditText
android:id=&quot;@+id/editText&quot;
android:layout_width=&quot;0dp&quot;
android:layout_height=&quot;wrap_content&quot;
android:layout_marginStart=&quot;16dp&quot;
android:layout_marginTop=&quot;12dp&quot;
android:layout_marginEnd=&quot;16dp&quot;
android:layout_marginBottom=&quot;12dp&quot;
android:background=&quot;@null&quot;
android:ems=&quot;10&quot;
android:focusableInTouchMode=&quot;true&quot;
android:hint=&quot;Write a message&quot;
android:inputType=&quot;none|text|textAutoCorrect|textAutoComplete&quot;
app:layout_constraintBottom_toBottomOf=&quot;parent&quot;
app:layout_constraintEnd_toStartOf=&quot;@+id/button_send&quot;
app:layout_constraintHorizontal_bias=&quot;0.067&quot;
app:layout_constraintStart_toStartOf=&quot;parent&quot;
app:layout_constraintTop_toTopOf=&quot;parent&quot;
app:layout_constraintVertical_bias=&quot;1.0&quot; /&gt;
&lt;TextView
android:id=&quot;@+id/description&quot;
android:layout_width=&quot;0dp&quot;
android:layout_height=&quot;wrap_content&quot;
android:layout_marginStart=&quot;32dp&quot;
android:layout_marginTop=&quot;32dp&quot;
android:layout_marginEnd=&quot;32dp&quot;
android:textAlignment=&quot;center&quot;
android:textColor=&quot;@color/light_gray&quot;
app:layout_constraintBottom_toTopOf=&quot;@+id/editText&quot;
app:layout_constraintEnd_toEndOf=&quot;parent&quot;
app:layout_constraintStart_toStartOf=&quot;parent&quot;
app:layout_constraintTop_toBottomOf=&quot;@+id/toolbarConversation&quot;
app:layout_constraintVertical_bias=&quot;0.0&quot;
tools:text=&quot;Chat with connected device&quot; /&gt;
&lt;androidx.appcompat.widget.AppCompatImageButton
android:id=&quot;@+id/button_send&quot;

android:layout_width=&quot;wrap_content&quot;
android:layout_height=&quot;wrap_content&quot;
android:layout_marginStart=&quot;8dp&quot;
android:layout_marginTop=&quot;8dp&quot;
android:layout_marginEnd=&quot;16dp&quot;
android:layout_marginBottom=&quot;12dp&quot;
android:background=&quot;@null&quot;
android:src=&quot;@drawable/send_icon&quot;
app:layout_constraintBottom_toBottomOf=&quot;parent&quot;
app:layout_constraintEnd_toEndOf=&quot;parent&quot;
app:layout_constraintHorizontal_bias=&quot;1.0&quot;
app:layout_constraintStart_toStartOf=&quot;parent&quot;
app:layout_constraintTop_toTopOf=&quot;parent&quot;
app:layout_constraintVertical_bias=&quot;1.0&quot; /&gt;
&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;

ConversationFragment.java

package com.bluetooth.communicatorexample.fragments;

import android.animation.Animator;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowInsets;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.Toolbar;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.bluetooth.communicator.BluetoothCommunicator;
import com.bluetooth.communicator.Message;
import com.bluetooth.communicator.Peer;
import com.bluetooth.communicatorexample.Global;
import com.bluetooth.communicatorexample.MainActivity;

import com.bluetooth.communicatorexample.R;
import com.bluetooth.communicatorexample.gui.CustomAnimator;
import com.bluetooth.communicatorexample.gui.GuiTools;
import com.bluetooth.communicatorexample.gui.MessagesAdapter;
import androidx.appcompat.widget.AppCompatImageButton;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.LinearSmoothScroller;
import androidx.recyclerview.widget.RecyclerView;

public class ConversationFragment extends Fragment {
private ProgressBar loading;
private static final float LOADING_SIZE_DP = 24;
private EditText editText;
private AppCompatImageButton sendButton;
private RecyclerView mRecyclerView;
protected TextView description;
private ConstraintLayout constraintLayout;
private BluetoothCommunicator.Callback communicatorCallback;
private Global global;
private MainActivity activity;
private MessagesAdapter mAdapter;
private RecyclerView.SmoothScroller smoothScroller;
public ConversationFragment() {
//an empty constructor is always needed for fragments
}
@Override
public void onCreate(@Nullable Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
communicatorCallback = new BluetoothCommunicator.Callback() {
@Override
public void onConnectionLost(Peer peer) {
super.onConnectionLost(peer);
Toast.makeText(activity,&quot;Connection lost, reconnecting...&quot;,Toast.LENGTH_LONG).show();
}
@Override
public void onConnectionResumed(Peer peer) {
super.onConnectionResumed(peer);
Toast.makeText(activity,&quot;Connection resumed&quot;,Toast.LENGTH_LONG).show();

}
@Override
public void onMessageReceived(Message message, int source) {
super.onMessageReceived(message, source);
mAdapter.addMessage(message);
//smooth scroll
smoothScroller.setTargetPosition(mAdapter.getItemCount() - 1);
mRecyclerView.getLayoutManager().startSmoothScroll(smoothScroller);
}
@Override
public void onDisconnected(Peer peer, int peersLeft) {
super.onDisconnected(peer, peersLeft);
if (peersLeft == 0) {
activity.setFragment(MainActivity.DEFAULT_FRAGMENT);
}
}
};
}
@Override
public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle
savedInstanceState) {
return inflater.inflate(R.layout.fragment_conversation, container, false);
}
@Override
public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
super.onViewCreated(view, savedInstanceState);
editText = view.findViewById(R.id.editText);
sendButton = view.findViewById(R.id.button_send);
mRecyclerView = view.findViewById(R.id.recycler_view);
description = view.findViewById(R.id.description);
loading = view.findViewById(R.id.progressBar2);
constraintLayout = view.findViewById(R.id.container2);
}
@Override
public void onActivityCreated(@Nullable Bundle savedInstanceState) {
super.onActivityCreated(savedInstanceState);
activity = (MainActivity) requireActivity();

global = (Global) activity.getApplication();
Toolbar toolbar = activity.findViewById(R.id.toolbarConversation);
activity.setActionBar(toolbar);
WindowInsets windowInsets = activity.getFragmentContainer().getRootWindowInsets();
if (windowInsets != null) {
constraintLayout.dispatchApplyWindowInsets(windowInsets.replaceSystemWindowInsets(windowIns
ets.getSystemWindowInsetLeft(), windowInsets.getSystemWindowInsetTop(),
windowInsets.getSystemWindowInsetRight(), 0));
}
LinearLayoutManager layoutManager = new LinearLayoutManager(activity);
layoutManager.setStackFromEnd(true);
mRecyclerView.setLayoutManager(layoutManager);
smoothScroller = new LinearSmoothScroller(activity) {
@Override
protected int calculateTimeForScrolling(int dx) {
return 100;
}
};
mAdapter = new MessagesAdapter(global.getBluetoothCommunicator().getUniqueName(), new
MessagesAdapter.Callback() {
@Override
public void onFirstItemAdded() {
description.setVisibility(View.GONE);
mRecyclerView.setVisibility(View.VISIBLE);
}
});
mRecyclerView.setAdapter(mAdapter);
sendButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
if (global.getBluetoothCommunicator().getConnectedPeersList().size() &gt; 0) {
if (editText.getText().length() &gt; 0) {
Message message = new Message(global, &quot;m&quot;, editText.getText().toString(),
global.getBluetoothCommunicator().getConnectedPeersList().get(0));
global.getBluetoothCommunicator().sendMessage(message);
editText.setText(&quot;&quot;);
mAdapter.addMessage(message);
smoothScroller.setTargetPosition(mAdapter.getItemCount() - 1);
mRecyclerView.getLayoutManager().startSmoothScroll(smoothScroller);
}
}
}

});
}
@Override
public void onResume() {
super.onResume();
global.getBluetoothCommunicator().addCallback(communicatorCallback);
}
@Override
public void onPause() {
super.onPause();
global.getBluetoothCommunicator().removeCallback(communicatorCallback);
}
@Override
public void onDestroy() {
super.onDestroy();
}
public void appearLoading() {
int loadingSizePx = GuiTools.convertDpToPixels(activity, LOADING_SIZE_DP);
CustomAnimator animator = new CustomAnimator();
Animator animation = animator.createAnimatorSize(loading, 1, 1, loadingSizePx, loadingSizePx,
getResources().getInteger(R.integer.durationShort));
animation.addListener(new Animator.AnimatorListener() {
@Override
public void onAnimationStart(Animator animation) {
if(loading != null) {
loading.setVisibility(View.VISIBLE);
}
}
@Override
public void onAnimationEnd(Animator animation) {
}
@Override
public void onAnimationCancel(Animator animation) {
}
@Override
public void onAnimationRepeat(Animator animation) {

}
});
animation.start();
}
}